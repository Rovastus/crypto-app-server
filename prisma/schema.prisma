generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model Portpholio {
  id                 BigInt               @id @default(autoincrement()) @db.BigInt
  name               String               @unique
  taxMethod          TaxMethod
  fiat               Fiat
  exports            Export[]
  cryptoCoinInWallet CryptoCoinInWallet[]
}

model Export {
  id           BigInt        @id @default(autoincrement()) @db.BigInt
  name         String        @unique
  jsonData     String
  portpholioId BigInt
  portpholio   Portpholio    @relation(fields: [portpholioId], references: [id])
  deposit      Deposit[]
  earn         Earn[]
  transaction  Transaction[]
  withdraw     Withdraw[]
}

model CryptoCoinInWallet {
  id                        BigInt                      @id @default(autoincrement()) @db.BigInt
  time                      DateTime
  amount                    Decimal
  amountCoin                String
  remainAmount              Decimal
  expensesInFiat            Decimal
  portpholioId              BigInt
  portpholio                Portpholio                  @relation(fields: [portpholioId], references: [id])
  earn                      Earn?
  transaction               Transaction?
  transactionExpensesDetail TransactionExpensesDetail[]
}

model Deposit {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  time       DateTime
  amount     Decimal
  amountCoin String
  exportId   BigInt
  export     Export   @relation(fields: [exportId], references: [id])
}

model Withdraw {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  time       DateTime
  amount     Decimal
  amountCoin String
  exportId   BigInt
  export     Export   @relation(fields: [exportId], references: [id])
}

model Transaction {
  id                   BigInt               @id @default(autoincrement()) @db.BigInt
  time                 DateTime
  buy                  Decimal
  buyCoin              String
  price                Decimal
  priceCoin            String
  fee                  Decimal
  feeCoin              String
  exportId             BigInt
  export               Export               @relation(fields: [exportId], references: [id])
  cryptoCoinInWalletId BigInt
  cryptoCoinInWallet   CryptoCoinInWallet   @relation(fields: [cryptoCoinInWalletId], references: [id])
  transactionTaxEvent  TransactionTaxEvent?
}

model TransactionTaxEvent {
  id                        BigInt                      @id @default(autoincrement()) @db.BigInt
  profitInFiat              Decimal
  expensesInFiat            Decimal
  transactionId             BigInt
  transaction               Transaction                 @relation(fields: [transactionId], references: [id])
  transactionExpensesDetail TransactionExpensesDetail[]
}

model TransactionExpensesDetail {
  id                    BigInt              @id @default(autoincrement()) @db.BigInt
  amount                Decimal
  expensesInFiat        Decimal
  cryptoCoinInWalletId  BigInt
  cryptoCoinInWallet    CryptoCoinInWallet  @relation(fields: [cryptoCoinInWalletId], references: [id])
  transactionTaxEventId BigInt
  transactionTaxEvent   TransactionTaxEvent @relation(fields: [transactionTaxEventId], references: [id])
}

model Earn {
  id                   BigInt             @id @default(autoincrement()) @db.BigInt
  time                 DateTime
  amount               Decimal
  amountCoin           String
  exportId             BigInt
  export               Export             @relation(fields: [exportId], references: [id])
  earnTaxEventId       BigInt
  earnTaxEvent         EarnTaxEvent       @relation(fields: [earnTaxEventId], references: [id])
  cryptoCoinInWalletId BigInt
  cryptoCoinInWallet   CryptoCoinInWallet @relation(fields: [cryptoCoinInWalletId], references: [id])
}

model EarnTaxEvent {
  id           BigInt  @id @default(autoincrement()) @db.BigInt
  profitInFiat Decimal
  earn         Earn?
}

model CoinPairPriceHistory {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  time       DateTime
  price      Decimal
  url        String
  coinPairId BigInt
  coinPair   CoinPair @relation(fields: [coinPairId], references: [id])

  @@unique([time, coinPairId], name: "time_coinPairId_unique")
}

model CoinPair {
  id               BigInt                 @id @default(autoincrement()) @db.BigInt
  pair             String                 @unique
  pairPriceHistory CoinPairPriceHistory[]
}

enum TaxMethod {
  FIFO
  AVCO
}

enum Fiat {
  EUR
  USD
}
